---
title: "Learning AWK"
date: '`r format(Sys.Date(), "%Y-%m-%d")`'
date-format: "YYYY-MM-DD"
execute:
  echo: true
  cache: false
format:
   gfm:
     html-math-method: webtex
     toc: true
engine: knitr
---

![Build README](https://github.com/davetang/learning_awk/actions/workflows/create_readme.yml/badge.svg)

Learning AWK.

## Motivation

After failing to use AWK, I always resort back to using `perl -lane`. This
works fine but perhaps more people are familiar with AWK than Perl. Here I'll
try to finally learn the AWK syntax.

## Using AWK

99% of the time I use AWK is because it can print specific columns even with
inconsistent delimiting. Consider the following output.

```{bash}
#| label: wc_shell_script

for f in $(ls *.sh); do wc ${f}; done
```

Normally I use `cut` to print out specific columns but this does not work well
when the output is irregular.

```{bash}
#| label: wc_shell_script_cut

for f in $(ls *.sh); do wc ${f}; done | cut -f3-4 -d' '
```

AWK handles this nicely (somehow).

```{bash}
#| label: wc_shell_script_awk

for f in $(ls *.sh); do wc ${f}; done | awk '{print $3,$4}'
```

I also know how to use the Output Field Separator.

```{bash}
#| label: wc_shell_script_awk_ofs

for f in $(ls *.sh); do wc ${f}; done | awk 'OFS="," {print $3,$4}'
```

And that's more or less about it.

## Getting started

From [Getting Started with
`awk`](https://www.gnu.org/software/gawk/manual/gawk.html#Getting-Started).

> The basic function of `awk` is to search files for lines (or other units of
> text) that contain certain patterns. When a line matches one of the patterns,
> `awk` performs specified actions on that line. `awk` continues to process
> input lines in this way until it reaches the end of the input files.

A rule consists of a _pattern_ followed by an _action_. The action is enclosed
in braces and newlines usually separate rules. Therefore an `awk` program looks
like this:

```
pattern { action }
pattern { action }
...
```

### Pre-defined variables

* `RS/ORS` - record separator/output record separator set to a newline character by default
* `NR` - number record, i.e. line number

```{bash}
#| label: number_record

head -4 readme.qmd | awk '{print NR}'
```
* `FS/OFS` - field separator/output field separator set to white space as default
* `NF` - number fields

```{bash}
#| label: number_fields

for f in $(ls *.sh); do wc ${f}; done | awk '{print NF}'
```

### Syntax

AWK uses the following syntax: `pattern { action }`; if the pattern is non-zero,
i.e. true, the action block is executed. `{print}` is the default action block,
so we _could_ exclude it in the example below but it makes it less readable.

```{bash}
#| label: awk_syntax

awk '1 {print}' data/test.dat
```

### Examples

Skip header.

```{bash}
#| label: skip_header

awk 'NR>1' data/test.dat
```

Print specific lines.

```{bash}
#| label: specific_lines

awk 'NR>1 && NR<=4' data/test.dat
```

Print lines with 1 or more fields.

```{bash}
#| label: print_lines_with_fields

awk 'NF' data/test.dat
```

Print specific fields; `$0` is the entire record but is not used in the example.
No pattern is specified, so an action is carried out for every record.

```{bash}
#| label: print_specific_fields

awk '{print $1,$3}' FS=, OFS=, data/test.dat
```

There are `BEGIN` blocks in AWK, just like in Perl.

```{bash}
#| label: begin_block

awk 'BEGIN { FS=OFS="," } NF { print $1, $3 }' data/test.dat
```

And also `END` blocks.

```{bash}
#| label: end_block

awk '{ SUM+=$1 } END { print SUM }' FS=, OFS=, data/test.dat
```
Using a regex.

```{bash}
#| label: regex

awk '!/^$/' data/test.dat
```

**All arrays in AWK are associative arrays**, i.e. hashes or dictionaries. This
makes it easy to remove duplicate lines.

```{bash}
#| label: duplicated_lines

awk '!l[$0]++' data/test.dat
```

I don't understand how this works, but the following removes multiple spaces
(default field separator).

```{bash}
#| label: removing_multiple_spaces

awk '$1=$1' data/test.dat
```

`printf` where `%s` for strings, `%d` for integers, and `%f` for floating
points. The `+$1` forces the evaluation of `$1` in a numerical context and
therefore any record in column one that is not a number returns 0 and is thus
skipped. While it is a nice shortcut, it's hard to read.

```{bash}
#| label: printf

awk '+$1 { printf("%s ",  $3) }' FS=, data/test.dat
```

To upper case.

```{bash}
#| label: toupper

awk '$3 { print toupper($0) }' data/test.dat
```

Search and replace with `gsub`.

```{bash}
#| label: gsub

awk '+$1 { gsub(/ +/, "-", $2); print }' FS=, data/test.dat
```

## Further reading

* [The GNU Awk User's Guide](https://www.gnu.org/software/gawk/manual/gawk.html)
* [Getting Started with AWK guide](https://linuxhandbook.com/awk-command-tutorial/)

## Version

AWK version used to generate this document.

```{bash}
#| label: awk_version

awk --version
```
